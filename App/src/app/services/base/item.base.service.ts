/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE itemBaseService PLEASE EDIT ../item.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 // DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { Item } from '../../domain/rapi-dev-kit_db/item';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../Item.service.ts
 */

/*
 * SCHEMA DB Item
 *
	{
		Active: {
			type: 'Boolean',
			required : true
		},
		Created: {
			type: 'Integer'
		},
		Data: {
			type: 'String'
		},
		Modified: {
			type: 'Integer'
		},
		Order: {
			type: 'Integer'
		},
		Protected: {
			type: 'Boolean'
		},
		Status: {
			type: 'String'
		},
		//RELATIONS
		//EXTERNAL RELATIONS
		Creator: {
			type: Schema.ObjectId,
			ref : "Item"
		},
		Link: {
			type: Schema.ObjectId,
			ref : "Item"
		},
		Type: {
			type: Schema.ObjectId,
			required : true,
			ref : "Item"
		},
	}
 *
 */
@Injectable()
export class ItemBaseService {

    contextUrl: string = environment.endpoint + '/items';
    constructor(
        protected http: HttpClient
        ) { }

    // CRUD METHODS

    /**
    * ItemService.create
    *   @description CRUD ACTION create
    *
    */
    create(item: Item): Observable<Item> {
        return this.http
            .post<Item>(this.contextUrl, item)
            .pipe(map(data => data));
    }

    /**
    * ItemService.delete
    *   @description CRUD ACTION delete
    *   @param ObjectId id Id
    *
    */
    remove(id: string): Observable<void> {
        return this.http
            .delete<void>(this.contextUrl + '/' + id)
            .pipe(map(data => data));
    }

    /**
    * ItemService.findByActive
    *   @description CRUD ACTION findByActive
    *   @param Objectid key Id of the resource Active to search
    *
    */
    findByActive(id: string): Observable<Item[]> {
        return this.http
            .get<Item[]>(this.contextUrl + '/findByActive/' + id)
            .pipe(
                map(response => response)
            );
    }

    /**
    * ItemService.findByCreated
    *   @description CRUD ACTION findByCreated
    *   @param Integer by start date
    *   @param Integer to end date
    *
    */
    findByCreated(id: string): Observable<Item[]> {
        return this.http
            .get<Item[]>(this.contextUrl + '/findByCreated/' + id)
            .pipe(
                map(response => response)
            );
    }

    /**
    * ItemService.findByCreator
    *   @description CRUD ACTION findByCreator
    *   @param Objectid key Id of the resource Creator to search
    *
    */
    findByCreator(id: string): Observable<Item[]> {
        return this.http
            .get<Item[]>(this.contextUrl + '/findByCreator/' + id)
            .pipe(
                map(response => response)
            );
    }

    /**
    * ItemService.findByProtected
    *   @description CRUD ACTION findByProtected
    *   @param Objectid key Id of the resource Protected to search
    *
    */
    findByProtected(id: string): Observable<Item[]> {
        return this.http
            .get<Item[]>(this.contextUrl + '/findByProtected/' + id)
            .pipe(
                map(response => response)
            );
    }

    /**
    * ItemService.findByType
    *   @description CRUD ACTION findByType
    *   @param Objectid key Id della risorsa Type da cercare
    *
    */
    findByType(id: string): Observable<Item[]> {
        return this.http
            .get<Item[]>(this.contextUrl + '/findByType/' + id)
            .pipe(
                map(response => response)
            );
    }

    /**
    * ItemService.get
    *   @description CRUD ACTION get
    *   @param ObjectId id Id 
    *
    */
    get(id: string): Observable<Item> {
        return this.http
            .get<Item>(this.contextUrl + '/' + id)
            .pipe(map(data => data));
    }

    /**
    * ItemService.getLink
    *   @description CRUD ACTION getLink
    *   @param Objectid id ID of Item from Link
    *
    */
    getLink(id: string): Observable<any[]> {
        return this.http
            .get<any[]>(this.contextUrl + '/' + id + 'getLink')
            .pipe(
                map(response => response)
            );
     }

    /**
    * ItemService.list
    *   @description CRUD ACTION list
    *
    */
    list(): Observable<Item[]> {
        return this.http
            .get<Item[]>(this.contextUrl)
            .pipe(map(data => data));
    }

    /**
    * ItemService.update
    *   @description CRUD ACTION update
    *   @param ObjectId id Id
    *
    */
    update(item: Item): Observable<Item> {
        return this.http
            .post<Item>(this.contextUrl + '/' + item._id, item)
            .pipe(map(data => data));
    }


    // Custom APIs

}
